#!/usr/bin/perl
# /=====================================================================\ #
# |  CorTeX Framework                                                   | #
# | Gears - Scheduler and Gearman Client Manager                        | #
# |=====================================================================| #
# | Part of the LaMaPUn project: https://trac.kwarc.info/lamapun/       | #
# |  Research software, produced as part of work done by:               | #
# |  the KWARC group at Jacobs University                               | #
# | Copyright (c) 2012                                                  | #
# | Released under the GNU Public License                               | #
# |---------------------------------------------------------------------| #
# | Deyan Ginev <d.ginev@jacobs-university.de>                  #_#     | #
# | http://kwarc.info/people/dginev                            (o o)    | #
# \=========================================================ooo==U==ooo=/ #
use strict;
use warnings;
use Encode;
use FindBin;
use File::Spec::Functions qw/catdir catfile/;
my ($RealBin_safe,$libdir);
BEGIN {
  $FindBin::RealBin =~ /^([^\0]+)\z/; # Valid Unix path TODO: Windows, revisit regexp
  $RealBin_safe = $1;
  die 'Fatal:IO:tainted RealBin was tainted! Failing...'
   unless ($RealBin_safe && (-e catfile($RealBin_safe,'cortex-client')));
  $libdir = catdir($RealBin_safe,"..","lib"); }
if (-d $libdir) { # If started locally, consult ../lib
  use lib $libdir; }

use CorTeX::Util::DB_File_Utils qw(db_file_connect db_file_disconnect);
use CorTeX::Util::Compare qw(same_set);
use CorTeX::Backend;
use Unix::Processors;

my $check_interval = 10;

# Make sure we're terminating when requested to:
$SIG{'INT'} = \&stop_all; # Interrupt handler
$SIG{'HUP'} = \&stop_all; # Apache Hangup handler
$SIG{'KILL'} = \&stop_all; # Just good-old KILL handler
$SIG{'TERM'} = \&stop_all; # TERM handler
$SIG{'CHLD'} = 'IGNORE';

# Set up global state
my ($CORTEX_DB_DIR) = @ARGV;
my $Cache={ clients=>[], exist_url=>'', sesame_url=>'', servers=>[] };  # Catalogue the child processes
$Cache->{processor_multiplier} = Unix::Processors->new->max_online;
my $db_handle = db_file_connect($CORTEX_DB_DIR);
$db_handle->{CORTEX_DB_DIR} = $CORTEX_DB_DIR if $CORTEX_DB_DIR;
my $backend = CorTeX::Backend->new(%$db_handle);
db_file_disconnect($db_handle);
# Start cron loop managing the client and worker children

while (1) { # Every minute, check:
  # Reinit, When servers or backends change
  if (setup_changed()) {
    # Halt what we're doing
    stop_children();
    # Add/update all default services (if necessary)
    # Grab a backend with the updated info
    $db_handle = db_file_connect($CORTEX_DB_DIR);
    $db_handle->{CORTEX_DB_DIR} = $CORTEX_DB_DIR if $CORTEX_DB_DIR;
    $backend = CorTeX::Backend->new(%$db_handle);
    # Make sure we clean up after we halted
    $backend->taskdb->mark_limbo_entries_queued;
    db_file_disconnect($db_handle);
    # Start clients
    my $needed = clients_needed();
    spawn_clients($needed) if ($needed > 0); }

  my $taskdb = $backend->taskdb;
  # In case things just died away, respawn them:
  my $needed = clients_needed();
  spawn_clients($needed) if ($needed > 0);
  # Check again in a minute...
  sleep $check_interval; }

sub spawn_clients {
  my ($needed) = @_;
  my @servers = @{$Cache->{servers}};
  # Servers x processors = # clients
  for my $num(1..$needed) {
    # Fork a job for each one!
    my $pid = fork();
    if ($pid == 0) {
      exec(catfile($RealBin_safe,"cortex-client"),$CORTEX_DB_DIR||'default',@servers);
    } else {
      print STDERR "Started Client #$num : process $pid\n";
      push @{$Cache->{clients}}, $pid;
    }
  }}

sub clients_needed {
  my @current_clients = @{$Cache->{clients}};
  my $desired_clients = $Cache->{processor_multiplier}*scalar(@{$Cache->{servers}});
  # Collect the alive client pids and respawn the delta between max and current
  my @verified = ();
  foreach my $client(@current_clients) {
    if (kill 0, $client) {
      push @verified, $client; } }
  $Cache->{clients} = \@verified;
  my $needed = $desired_clients - scalar(@verified);
  return $needed; }

sub stop_all {
  stop_children();
  stop_immediate(); }
sub stop_children {
  stop_clients(); }
sub stop_clients {
  stop_child($_) foreach @{$Cache->{clients}};
  $Cache->{clients} = []; }
sub stop_child {
  my ($pid) = @_;
  # Send a SIGTERM to the child job
  kill 15, $pid;
  waitpid($pid,0); }
sub stop_immediate {exit 0;}

sub setup_changed {
  my $reinitialize_needed = 0;
  $db_handle = db_file_connect($CORTEX_DB_DIR);
  my $sesame_url = $db_handle->{sesame_url}||'';
  my $exist_url = $db_handle->{exist_url}||'';
  my @servers = split("\n",$db_handle->{gearman_urls}||'');
  db_file_disconnect($db_handle);
  if ($Cache->{exist_url} ne $exist_url) {
    $reinitialize_needed = 1;
    $Cache->{exist_url} = $exist_url; }
  if ($Cache->{sesame_url} ne $sesame_url) {
    $reinitialize_needed = 1;
    $Cache->{sesame_url} = $sesame_url; }
  if (! same_set($Cache->{servers},\@servers)) {
    $reinitialize_needed = 1;
    @{$Cache->{servers}} = @servers; }
  return $reinitialize_needed; }

__END__

=pod 

=head1 NAME

C<cortex-gears> - Scheduler of the CorTeX framework

=head1 SYNOPSIS

TODO

=head1 DESCRIPTION

TODO

=head1 Gearman Installation

Under Debian-based systems:
 sudo apt-get install
   gearman
   gearman-job-server
   gearman-tools
   gearman-server
   mod-gearman-tools
   libgearman-client-async-perl
   libmodule-install-xsutil-perl
   libgearman-dev

   cpan Gearman::XS::Client
   cpan Gearman::XS::Worker
=head1 AUTHOR

Deyan Ginev <d.ginev@jacobs-university.de>

=head1 COPYRIGHT

 Research software, produced as part of work done by 
 the KWARC group at Jacobs University Bremen.
 Released under the GNU Public License

=cut
