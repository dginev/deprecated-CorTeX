#!/usr/bin/perl
# /=====================================================================\ #
# |  CorTeX Framework                                                   | #
# | cortex-client -- TaskDB and Gearman broker                          | #
# |=====================================================================| #
# | Part of the LaMaPUn project: https://trac.kwarc.info/lamapun/       | #
# |  Research software, produced as part of work done by:               | #
# |  the KWARC group at Jacobs University                               | #
# | Copyright (c) 2012                                                  | #
# | Released under the GNU Public License                               | #
# |---------------------------------------------------------------------| #
# | Deyan Ginev <d.ginev@jacobs-university.de>                  #_#     | #
# | http://kwarc.info/people/dginev                            (o o)    | #
# \=========================================================ooo==U==ooo=/ #
use strict;
use warnings;
use Encode;
use Data::Dumper;
use JSON::XS qw(decode_json encode_json);

use FindBin;
my ($RealBin_safe,$libdir);
BEGIN {
  $FindBin::RealBin =~ /^([^\0]+)\z/; # Valid Unix path TODO: Windows, revisit regexp
  $RealBin_safe = $1;
  die 'Fatal:IO:tainted RealBin was tainted! Failing...'
   unless ($RealBin_safe && (-e $RealBin_safe.'/cortex-worker')); 
  $libdir = $RealBin_safe."/lib"; }

if (-d $libdir) {
  use lib $libdir;}

use CorTeX::Backend;
use CorTeX::Util::DB_File_Utils qw(db_file_connect db_file_disconnect);
use AnyEvent::Gearman;

# Grab a TaskDB
my $db_handle = db_file_connect;
my $taskdb = CorTeX::Backend->new(%$db_handle)->taskdb;
db_file_disconnect();


### MAIN ###
# Event loop between DB Polling and Gearman dispatching

my (@servers) = @ARGV;
my $queue_size = 200;
my $client = gearman_client(@servers);

my $taskdb_ready = AnyEvent->condvar;
my $gearman_ready = AnyEvent->condvar;

my $results = [];
my $manager = AnyEvent->condvar;

# Prepare manager
$manager->cb(sub {
 my $response = $_[0]->recv;
 push @$results, $response;
 if (@$results == $queue_size) {
  # Done with this queue, report to DB
  $taskdb->complete_tasks(results=>$results);
  $results=[];
  next_queue($taskdb,$queue_size); }
});
# Start the queue:
next_queue($taskdb,$queue_size);

sub next_queue {
  my ($taskdb,$queue_size) = @_;
  my ($mark,$tasks) = $taskdb->fetch_tasks(size=>$queue_size);
  if (! (@$tasks)) {
    # Try again in a minute if queue is empty
    sleep 60; next_queue($taskdb,$queue_size); }
  foreach my $task(@$tasks) {
    $client->add_task(
      $task->{function} => $task->{workload},
      on_complete => sub {
          $manager->send({status=>"complete",result=>$_[1]});
       },
      on_fail => sub {
          $manager->send({status=>'TODO: fail'});
      }
    );
  }}

AnyEvent->condvar->recv;